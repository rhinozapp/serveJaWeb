{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/my-toolbar/loginDialog.html","webpack:///./src/app/components/my-toolbar/my-toolbar.component.css","webpack:///./src/app/components/my-toolbar/my-toolbar.component.html","webpack:///./src/app/components/my-toolbar/my-toolbar.component.ts","webpack:///./src/app/components/my-toolbar/signUpDialog.html","webpack:///./src/app/default.error-matcher.ts","webpack:///./src/app/models/place.ts","webpack:///./src/app/services/api-service/api-service.service.ts","webpack:///./src/app/services/helpers/helpers.service.ts","webpack:///./src/app/services/place/place.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-my-toolbar></app-my-toolbar>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport {\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatDialogModule,\n    MatInputModule,\n    ErrorStateMatcher,\n    MatOptionModule,\n    MatSelectModule\n} from '@angular/material';\nimport {LoginDialogComponent, MyToolbarComponent, SignUpDialogComponent} from './components/my-toolbar/my-toolbar.component';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {ApiServiceService} from \"./services/api-service/api-service.service\";\nimport {PlaceService} from \"./services/place/place.service\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {NgxMaskModule} from \"ngx-mask\";\nimport {HelpersService} from \"./services/helpers/helpers.service\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        MyToolbarComponent,\n        LoginDialogComponent,\n        SignUpDialogComponent\n    ],\n    entryComponents : [\n        LoginDialogComponent,\n        SignUpDialogComponent\n    ],\n    imports: [\n        BrowserModule,\n        ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n        BrowserAnimationsModule,\n        LayoutModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatListModule,\n        MatDialogModule,\n        MatInputModule,\n        MatSelectModule,\n        MatOptionModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        NgxMaskModule.forRoot()\n    ],\n    exports : [\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatListModule,\n        MatDialogModule,\n        MatInputModule,\n        MatSelectModule,\n        MatOptionModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NgxMaskModule\n    ],\n    providers: [\n        ErrorStateMatcher,\n        ApiServiceService,\n        PlaceService,\n        HelpersService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<h2 mat-dialog-title>Login</h2>\\n<form [formGroup]=\\\"_myForm\\\" (submit)=\\\"loginAction(); false;\\\">\\n    <mat-dialog-content align=\\\"center\\\">\\n        <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>E-mail</mat-label>\\n            <input matInput\\n                   [(ngModel)]=\\\"_email\\\"\\n                   name=\\\"email\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   formControlName=\\\"email\\\"\\n                   [formControl]=\\\"_myForm.controls.email\\\"\\n                   placeholder=\\\"Entre com seu e-mail\\\"\\n                   required>\\n            <mat-icon matSuffix>person</mat-icon>\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.email.hasError('email')\\\">\\n                Digite um e-mail válido\\n            </mat-error>\\n            <mat-error *ngIf=\\\"_myForm.controls.email.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>Senha</mat-label>\\n            <input matInput\\n                   [(ngModel)]=\\\"_password\\\"\\n                   type=\\\"password\\\"\\n                   name=\\\"password\\\"\\n\\n                   formControlName=\\\"password\\\"\\n                   [formControl]=\\\"_myForm.controls.password\\\"\\n                   placeholder=\\\"Entre com sua senha\\\">\\n            <mat-icon matSuffix>vpn_key</mat-icon>\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.password.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n    </mat-dialog-content>\\n\\n    <mat-dialog-actions align=\\\"end\\\">\\n        <button mat-button\\n                mat-dialog-close>Cancelar</button>\\n        <button mat-button\\n                [type]=\\\"submit\\\"\\n                [disabled]=\\\"_myForm.invalid\\\">GO!</button>\\n    </mat-dialog-actions>\\n</form>\\n\"","module.exports = \".my-toolbar-icon {\\n    padding: 0 14px;\\n}\\n\\n.my-toolbar-spacer {\\n    flex: 1 1 auto;\\n}\\n\\n.mat-form-field{\\n    width: 100%;\\n}\\n\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n    <mat-toolbar-row>\\n        <span>ServeJá</span>\\n        <span class=\\\"my-toolbar-spacer\\\"></span>\\n        <button mat-button (click)=\\\"openSignUpDialog()\\\">CADASTRE-SE</button>\\n        <button mat-button (click)=\\\"openLoginDialog()\\\">ENTRAR</button>\\n    </mat-toolbar-row>\\n</mat-toolbar>\\n\"","import {Component, Inject, OnInit, ViewEncapsulation} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material\";\nimport {MyErrorStateMatcher} from \"../../default.error-matcher\";\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {PlaceService} from \"../../services/place/place.service\";\nimport {Place} from \"../../models/place\";\nimport {HelpersService} from \"../../services/helpers/helpers.service\";\n\n@Component({\n    selector: 'app-my-toolbar',\n    templateUrl: './my-toolbar.component.html',\n    styleUrls: ['./my-toolbar.component.css'],\n    encapsulation : ViewEncapsulation.None\n})\nexport class MyToolbarComponent implements OnInit {\n    constructor(private _dialog: MatDialog) {}\n\n    ngOnInit() {}\n\n    openLoginDialog(): void {\n        this._dialog.open(LoginDialogComponent, {\n            width: '500px',\n            data: {},\n            disableClose : true\n        })\n            .afterClosed().subscribe(result => {\n            console.log('The dialog was closed', result);\n        });\n    }\n\n    openSignUpDialog(): void {\n        this._dialog.open(SignUpDialogComponent, {\n            width: '500px',\n            data: {},\n            disableClose : true\n        })\n            .afterClosed().subscribe(result => {\n            console.log('The dialog was closed', result);\n        });\n    }\n}\n\n@Component({\n    selector: 'login-dialog',\n    templateUrl: 'loginDialog.html',\n})\nexport class LoginDialogComponent {\n    matcher = new MyErrorStateMatcher();\n\n    private _email : string;\n    private _password : string;\n    private _myForm : FormGroup;\n\n    constructor(\n        public dialogRef: MatDialogRef<LoginDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        formBuilder : FormBuilder,\n        private _userService : PlaceService) {\n\n        this._myForm = formBuilder.group({\n            email : new FormControl('', [\n                Validators.required,\n                Validators.email\n            ]),\n            password : new FormControl('', [\n                Validators.required\n            ])\n        });\n    }\n\n    onNoClick(): void {\n        this.dialogRef.close();\n    }\n\n    loginAction(){\n        console.log(this._email, this._password);\n\n        this._userService.doLogin(this._email, this._password)\n            .subscribe(data => console.log(data));\n    }\n}\n\n@Component({\n    selector: 'sign-up-dialog',\n    templateUrl: 'signUpDialog.html',\n})\nexport class SignUpDialogComponent {\n    matcher = new MyErrorStateMatcher();\n\n    private _place : Place = new Place();\n    public listState : Array<string> = [\n        'SP',\n        'AC',\n        'AL',\n        'AM',\n        'AP',\n        'BA',\n        'CE',\n        'DF',\n        'ES',\n        'GO',\n        'MA',\n        'MG',\n        'MS',\n        'MT',\n        'PA',\n        'PB',\n        'PE',\n        'PI',\n        'PR',\n        'RJ',\n        'RN',\n        'RO',\n        'RR',\n        'RS',\n        'SC',\n        'SE',\n        'TO'\n    ];\n    private _repeatPassword : String;\n    private _myForm : FormGroup;\n    private _addressInfo : any;\n\n    constructor(\n        public dialogRef: MatDialogRef<SignUpDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        formBuilder : FormBuilder,\n        private _userService : PlaceService,\n        private _helpers : HelpersService) {\n        this._myForm = formBuilder.group({\n            placeName : new FormControl('', [\n                Validators.required\n            ]),\n            email : new FormControl('', [\n                Validators.required,\n                Validators.email\n            ]),\n            password : new FormControl('', [\n                Validators.required\n            ]),\n            repeatPassword : new FormControl('', [\n                Validators.required,\n                this.matchPassword\n            ]),\n            cnpj : new FormControl('', [\n                Validators.required\n            ]),\n            zipCode : new FormControl('', [\n                Validators.required,\n                Validators.minLength(8)\n            ]),\n            street : new FormControl('', [\n                Validators.required\n            ]),\n            number : new FormControl('', []),\n            complement : new FormControl('', []),\n            neighborhood : new FormControl('', [\n                Validators.required\n            ]),\n            city : new FormControl('', [\n                Validators.required\n            ]),\n            state : new FormControl('', []),\n        });\n    }\n\n    onNoClick(): void {\n        this.dialogRef.close();\n    }\n\n    signUpAction(){\n        console.log(this._place);\n        /*this._userService.doSignUp()\n            .subscribe(data => console.log(data));*/\n    }\n\n    zipCodeChange(){\n        this._helpers.codeAddress(this._place.zipCode)\n            .subscribe((value : any) => {\n                this._place.loc = [value[0].geometry.location.lng(), value[0].geometry.location.lat()];\n\n                this._helpers.getAddressInfo(this._place.zipCode)\n                    .subscribe(value => {\n                        this._place.street = value.logradouro;\n                        this._place.complement = value.complemento;\n                        this._place.neighborhood = value.bairro;\n                        this._place.city = value.localidade;\n                        this._place.state = value.uf;\n\n                    }, () => {\n                        this._myForm.controls['zipCode'].setErrors({\n                            invalid : true\n                        });\n                    })\n            }, () => {\n                this._myForm.controls['zipCode'].setErrors({\n                    invalid : true\n                });\n            });\n    }\n\n    matchPassword(input: AbstractControl) : { [key: string]: any }{\n        return !input.root || !(<FormGroup>input.root).controls ?\n            null :\n            input.value !== (<FormGroup>input.root).controls.password.value ?\n                {mismatchedPassword : true} :\n                null;\n    }\n}\n","module.exports = \"<h2 mat-dialog-title>Cadastrar-se</h2>\\n<form [formGroup]=\\\"_myForm\\\" (submit)=\\\"signUpAction(); false;\\\">\\n    <mat-dialog-content align=\\\"center\\\">\\n        <!--NAME-->\\n        <mat-form-field>\\n            <mat-label>Nome do Estabelecimento</mat-label>\\n            <input matInput\\n                   formControlName=\\\"placeName\\\"\\n                   [(ngModel)]=\\\"_place.namePlace\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.placeName\\\"\\n                   placeholder=\\\"Nome do estabelecimento\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.placeName.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--EMAIL-->\\n        <mat-form-field>\\n            <mat-label>E-mail</mat-label>\\n            <input matInput\\n                   formControlName=\\\"email\\\"\\n                   [(ngModel)]=\\\"_place.email\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.email\\\"\\n                   placeholder=\\\"Entre com seu e-mail\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.email.hasError('email')\\\">\\n                Digite um e-mail válido\\n            </mat-error>\\n            <mat-error *ngIf=\\\"_myForm.controls.email.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--PASSWORD-->\\n        <mat-form-field>\\n            <mat-label>Senha</mat-label>\\n            <input matInput\\n                   formControlName=\\\"password\\\"\\n                   [(ngModel)]=\\\"_place.password\\\"\\n                   type=\\\"password\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.password\\\"\\n                   placeholder=\\\"Entre com sua senha\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.password.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--REPEAT PASSWORD-->\\n        <mat-form-field>\\n            <mat-label>Repetir Senha</mat-label>\\n            <input matInput\\n                   formControlName=\\\"repeatPassword\\\"\\n                   [(ngModel)]=\\\"_repeatPassword\\\"\\n                   type=\\\"password\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.repeatPassword\\\"\\n                   placeholder=\\\"Entre com sua senha\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.repeatPassword.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n            <mat-error *ngIf=\\\"_myForm.controls.repeatPassword.hasError('mismatchedPassword')\\\">\\n                Senhas diferente\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--CNPJ-->\\n        <mat-form-field>\\n            <mat-label>CNPJ</mat-label>\\n            <input matInput\\n                   formControlName=\\\"cnpj\\\"\\n                   [(ngModel)]=\\\"_place.cnpj\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.cnpj\\\"\\n                   placeholder=\\\"CNPJ\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.cnpj.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--CEP-->\\n        <mat-form-field>\\n            <mat-label>CEP</mat-label>\\n            <input matInput\\n                   formControlName=\\\"zipCode\\\"\\n                   [(ngModel)]=\\\"_place.zipCode\\\"\\n                   (change)=\\\"zipCodeChange()\\\"\\n\\n                   [dropSpecialCharacters]=\\\"true\\\"\\n                   mask='00000-000'\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.zipCode\\\"\\n                   placeholder=\\\"CEP\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.zipCode.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n            <mat-error *ngIf=\\\"_myForm.controls.zipCode.hasError('invalid')\\\">\\n                CEP incorreto, digite um CEP válido\\n            </mat-error>\\n            <mat-error *ngIf=\\\"_myForm.controls.zipCode.hasError('minLength')\\\">\\n                CEP deve ter no Mínimo 8 caracteres\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--STREET-->\\n        <mat-form-field>\\n            <mat-label>Rua</mat-label>\\n            <input matInput\\n                   formControlName=\\\"street\\\"\\n                   [(ngModel)]=\\\"_place.street\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.street\\\"\\n                   placeholder=\\\"Rua\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.street.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--NUMBER-->\\n        <mat-form-field>\\n            <mat-label>Nº</mat-label>\\n            <input matInput\\n                   [(ngModel)]=\\\"_place.number\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   formControlName=\\\"number\\\">\\n        </mat-form-field>\\n\\n        <!--COMPLEMENT-->\\n        <mat-form-field>\\n            <mat-label>Complemento</mat-label>\\n            <input matInput\\n                   [(ngModel)]=\\\"_place.complement\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   formControlName=\\\"complement\\\">\\n        </mat-form-field>\\n\\n        <!--NEIGHBORHOOD-->\\n        <mat-form-field>\\n            <mat-label>Bairro</mat-label>\\n            <input matInput\\n                   formControlName=\\\"neighborhood\\\"\\n                   [(ngModel)]=\\\"_place.neighborhood\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.neighborhood\\\"\\n                   placeholder=\\\"Bairro\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.neighborhood.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--CITY-->\\n        <mat-form-field>\\n            <mat-label>Cidade</mat-label>\\n            <input matInput\\n                   formControlName=\\\"city\\\"\\n                   [(ngModel)]=\\\"_place.city\\\"\\n\\n                   [errorStateMatcher]=\\\"matcher\\\"\\n                   [formControl]=\\\"_myForm.controls.city\\\"\\n                   placeholder=\\\"Cidade\\\">\\n\\n            <mat-error *ngIf=\\\"_myForm.controls.city.hasError('required')\\\">\\n                Este campo é obrigatório\\n            </mat-error>\\n        </mat-form-field>\\n\\n        <!--STATE-->\\n        <mat-form-field>\\n            <mat-label>UF</mat-label>\\n            <mat-select [(ngModel)]=\\\"_place.state\\\"\\n\\n                        [errorStateMatcher]=\\\"matcher\\\"\\n                        formControlName=\\\"state\\\">\\n                <mat-option *ngFor=\\\"let data of listState\\\" [value]=\\\"data\\\">\\n                    {{data}}\\n                </mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n    </mat-dialog-content>\\n\\n    <mat-dialog-actions align=\\\"end\\\">\\n        <button mat-button\\n                mat-dialog-close>Cancelar</button>\\n        <button mat-button\\n                [type]=\\\"submit\\\"\\n                [disabled]=\\\"_myForm.invalid\\\">GO!</button>\\n    </mat-dialog-actions>\\n</form>\\n\"","import {ErrorStateMatcher} from \"@angular/material\";\nimport {FormControl, FormGroupDirective, NgForm} from \"@angular/forms\";\n\n/** Error when invalid control is dirty or touched*/\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return (control && control.invalid && (control.dirty || control.touched));\n    }\n}\n","export class Place {\n    namePlace : string;\n    email: string;\n    password : string;\n    hashRecovery : string;\n    cnpj : string;\n    description : string;\n    pageFacebook : string;\n    pageInstagram : string;\n    webSite : string;\n    logoPath : string;\n    headerImgPath : string;\n    zipCode: string;\n    street : string;\n    number : string;\n    complement : string;\n    neighborhood : string;\n    city : string;\n    state : string;\n    loc: PlaceLoc;\n    sunday : PlaceFunction;\n    monday : PlaceFunction;\n    tuesday : PlaceFunction;\n    wednesday : PlaceFunction;\n    thursday : PlaceFunction;\n    friday : PlaceFunction;\n    saturday : PlaceFunction;\n}\n\nexport class PlaceFunction{\n    constructor(\n        status : boolean,\n        timeStart : string,\n        timeEnd : string,\n        menu : string){}\n}\n\nexport class PlaceLoc{\n    constructor(coordinates: any){}\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable()\nexport class ApiServiceService {\n    private _url : string = 'http://localhost/';\n\n    constructor(public http: HttpClient) {}\n\n    get url(){\n        return this._url;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {} from '@types/googlemaps';\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\n\n@Injectable()\nexport class HelpersService {\n    geocoder: google.maps.Geocoder = new google.maps.Geocoder();\n\n    constructor(private _http : HttpClient) {}\n\n    geocode(latLng: google.maps.LatLng): Observable<google.maps.GeocoderResult[]> {\n        return Observable.create((observer: Observer<google.maps.GeocoderResult[]>) => {\n            // Invokes geocode method of Google Maps API geocoding.\n            this.geocoder.geocode({ location: latLng }, (\n                (results: google.maps.GeocoderResult[], status: google.maps.GeocoderStatus) => {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        observer.next(results);\n                        observer.complete();\n                    } else {\n                        console.log('Geocoding service: geocoder failed due to: ' + status);\n                        observer.error(status);\n                    }\n                })\n            );\n        });\n    }\n\n    codeAddress(address: string): Observable<google.maps.GeocoderResult[]> {\n        return Observable.create((observer: Observer<google.maps.GeocoderResult[]>) => {\n            // Invokes geocode method of Google Maps API geocoding.\n            this.geocoder.geocode({ address: address }, (\n                (results: google.maps.GeocoderResult[], status: google.maps.GeocoderStatus) => {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        observer.next(results);\n                        observer.complete();\n                    } else {\n                        observer.error(status);\n                    }\n                })\n            );\n        });\n    }\n\n    getCurrentPosition(): Observable<Position> {\n        return Observable.create((observer: Observer<Position>) => {\n            // Invokes getCurrentPosition method of Geolocation API.\n            navigator.geolocation.getCurrentPosition(\n                (position: Position) => {\n                    observer.next(position);\n                    observer.complete();\n                },\n                (error: PositionError) => {\n                    console.log('Geolocation service: ' + error.message);\n                    observer.error(error);\n                }\n            );\n        });\n    }\n\n    getAddressInfo(zipCode) : any {\n        return this._http.get('https://viacep.com.br/ws/'+zipCode+'/json/');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {ApiServiceService} from \"../api-service/api-service.service\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable()\nexport class PlaceService {\n    constructor(private _apiService : ApiServiceService,\n                private _http : HttpClient) {}\n\n    doLogin(email, password){\n        return this._http\n            .post(this._apiService.url + 'web/doLogin', {email, password});\n    }\n\n    doSignUp(){\n        return this._http\n            .post(this._apiService.url + 'web/doSignUp', {});\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}